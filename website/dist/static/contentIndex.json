{"Posts/About":{"title":"About","links":[],"tags":[],"content":"Something about me\n\nI am Pradyumna, a third year undergraduate computer science student studying in the Birla Institute of Science and Technology in Hyderabad, India.\nInterests (in no particular order):\n\nMachine Learning\nDeep Learning\nModern Fullstack Web Development\nLinux\nRecreational Programming\n\nSome relevant courses I have pursued in college:\n\nMachine Learning\nFoundations of Data Science\nData Structures and Algorithms\nObject Oriented Programming\nCompiler Construction\nDataBase Management Systems\n"},"Posts/Frontend-Development":{"title":"Frontend Development","links":[],"tags":[],"content":""},"Posts/Github-Pages":{"title":"Github Pages","links":["Posts/Frontend-Development"],"tags":["webdev","python","html","css","js","github","programming"],"content":"Warning in Advance: This post is going to be very code heavy\nIf you don’t know what Github Pages is, it is this cool feature offered by Github where they allow you to host static files right from your GitHub repository.\nAll we have to do is keep our HTML, CSS, and JavaScript files with an index.html in our repository (either in the root/ folder or the docs/ folder) and choose the Source in /settings/pages as Deploy from a branch. Each time we build, our website will be re-deployed (Though I have observed sometimes it doesn’t update and you have to unpublish the site and deploy again to fix it).\nOtherwise, if you want to get fancy, you can even run a build process using some workflow wizardry.\nBut I wanna have routing!\nI get it.\nwww.malladipradyumna.com/static-site-generator-for-github-pages.html looks way uglier.\nBasically, we don’t want the .html. We want to navigate to /blog to see all the posts instead of /blog.html.\nBut how to do routing in a static site deployed to github pages?\nThere are two ways.\nHave a SPA (Single Page Application) and manage routing using Javascript and the history API\nAdd this router.js to your base.html\nlet home = `{{ home }}`;\nlet about = `{{ about }}`;\nlet blog = `{{ blog }}`;\nlet invalidPage = &quot; {{ home }} &quot;;\n \nconst routes = {\n    &quot;/&quot;: home,\n    &quot;/about&quot;: about,\n    &quot;/blog&quot;: blog,\n    default: invalidPage,\n};\n \nconst render = path =&gt; {\n    console.log(&#039;path: &#039; + path);\n    const content = routes[path] || invalidPage;\n \n    document.querySelector(&quot;#root&quot;).innerHTML = content;\n};\n \n// Add a single click event listener for all links that navigate within the site\ndocument.addEventListener(&quot;click&quot;, evt =&gt; {\n    const target = evt.target;\n    if (target.tagName === &quot;A&quot; &amp;&amp; target.getAttribute(&quot;href&quot;).startsWith(&quot;/&quot;)) {\n        evt.preventDefault();\n        const { pathname: path } = new URL(target.href);\n        render(path);\n        window.history.pushState({ path }, path, path);\n    }\n});\n \nwindow.addEventListener(&quot;popstate&quot;, e =&gt; {\n    render(new URL(window.location.href).pathname);\n});\n \nwindow.onload = function init() {\n    render(&quot;/&quot;);\n};\nThe problems with this approach\nThis works only if the user clicks a button that redirects to say /about but doesn’t work if the user opens say www.malladipradyumna.com/about! It will navigate to 404.html on Gh-Pages!\nHow to fix this?\nOne way is to use a script that automatically redirect to index.html or the route based on the url when the document is loaded. See this Stackoverflow Question for more about this.\nBut this method is not perfect!\nThe browser will often give a very annoying popup before the redirect.\nWhat to do then?\nAs I was struggling I suddenly realized something!\nWait a minute! Don’t I have two static websites running on Github Pages already! Website that uses SolidJS’s solid-start router and Website that uses the Jekyll Static Site Generator!\nAfter some inspection of the build directories, it was obvious that the Github Pages server was automatically rendering route.html for /route.\nBoth the websites were compiling/building a static html file for each route.\nStatic Site Generator\nFinally, we come to the Static Site Generator.\nDirectory Structure\n├── build.log\n├── build.py\n├── README.md\n├── requirements.txt\n├── src\n│   ├── about.html\n│   ├── base.html\n│   ├── blog.html\n│   ├── index.html\n│   ├── input.css\n│   ├── post.html\n│   ├── _posts\n│   ├── _site\n│   └── static\n├── tailwind.config.js\n\nbase.html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; class=&quot;text-gray-900 bg-white font-serif&quot;&gt;\n \n&lt;head&gt;\n\t&lt;title&gt;Pradyumna&lt;/title&gt;\n\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; initial-scale=1.0&quot;&gt;\n\t&lt;link href = &quot;./static/css/main.css&quot; rel=&quot;stylesheet&quot;&gt;\n\t{% block head %}\n\t&lt;div class=&quot;headerDiv&quot;&gt;\n\t\t&lt;div class=&quot;header&quot;&gt;\n\t\t\t&lt;a href = &quot;/&quot;&gt; Home &lt;/a&gt;\n\t\t\t&lt;a href = &quot;/blog&quot;&gt; Blog &lt;/a&gt;\n\t\t\t&lt;a href = &quot;/about&quot;&gt; About &lt;/a&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n\t{% endblock %}\t\n&lt;/head&gt;\n \n&lt;body&gt;\n\t&lt;div id=&quot;root&quot;&gt;\n\t\t&lt;div id=&quot;main&quot;&gt;\n\t\t{% block main %}{% endblock %}\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n\t&lt;footer&gt;\n\t\t{% block footer %}{% endblock %}\n\t&lt;/footer&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\nNote that we are using jinja2 templating syntax. You must have encountered it if you have ever worked with flask or django libraries.\nIt makes the rendering of various different pages from our markdown/yaml content much easier.\npost.html and blog.html\n{% extends &quot;base.html&quot; %}\n{% block main %}\n&lt;h1 class=&quot;heading&quot;&gt;{{ post.title }}&lt;/h1&gt;\n&lt;div class=&quot;date&quot;&gt;{{ post.date }}&lt;/div&gt;\n&lt;div class = &quot;postContent&quot;&gt;{{ post.content | safe }}&lt;/div&gt;\n{% endblock %}\n{% extends &quot;base.html %}\n{% block main %}\n&lt;h1 class=&quot;heading&quot;&gt; Posts&lt;/h1&gt;\n&lt;ul class=&quot;posts_ul&quot;&gt;\n\t{% for post in posts %}\n\t&lt;li class = &quot;post_li&quot;&gt;\n\t\t&lt;a href=&quot;/{{ post.slug }}&quot; class=&quot;post_title&quot;&gt; {{ post.title }} &lt;/a&gt;\n\t\t&lt;span class=&quot;post_date&quot;&gt; {{ post.date }} &lt;/span&gt;\n\t&lt;/li&gt;\n\t{% endfor %}\n&lt;/ul&gt;\n{% endblock %}\nRendering each individual page\nWe load the content from say home.md and convert to markdown and render into home.html inside the docs/ directory.\nhome.md\n---\ntitle: Home\nlayout: Post\ntags: null\ndescription: null\n---\n \n---\n \n## Navigation:\n \n- Head over to /about to know more about me\n- Head over to /blog to read my posts\n \n---\nbuild.py\n# Get Home Page\nhome = None\ntry:\n    home = frontmatter.load(home_path)\n    logger.debug(&quot;home.md successfully loaded&quot;)\nexcept Exception as e:\n    logger.error(&quot;Failed to load home.md: %s&quot;, str(e))\n \n# Build index in docs\npage_index = None\nwith open(&quot;./src/index.html&quot;, &quot;r&quot;) as file:\n    page_index = file.read()\n \ntemplate_index = env.from_string(page_index)\nrendered_index = template_index.render(home=markdown.markdown(home.content))\n \nwith open(&quot;./docs/index.html&quot;, &quot;w&quot;) as file:\n    file.write(rendered_index)\n    logger.debug(&quot;index.html successfully built and saved&quot;)\n \nwith open(&quot;./docs/404.html&quot;, &quot;w&quot;) as file:\n    file.write(rendered_index)\n    logger.debug(&quot;404.html successfully built and saved&quot;)\nWe do this kind of thing for each page.\nRendering each individual post and blog.html\nLet’s say we have posts like this: _posts/06-11-2023-Demo.md\nbuild.py\nposts = []\ntry:\n    for filename in os.listdir(posts_path):\n        if filename.endswith(&quot;.md&quot;):  # Assuming your posts are Markdown files\n            post_path = os.path.join(posts_path, filename)\n            with open(post_path, &quot;r&quot;) as post_file:\n                posts.append({post_path: frontmatter.load(post_file)})\n    logger.debug(&quot;Posts successfully loaded&quot;)\nexcept Exception as e:\n    logger.error(&quot;Failed to load the posts from _posts: %s&quot;, str(e))\n\npage_blog = None\npost_keys = []\n\nfor i in posts:\n    input_string = [a for a in i.keys()][0]\n    post_keys.append(\n        (\n            input_string.split(&quot;/&quot;)[-1]\n            .split(&quot;.md&quot;)[0]\n            .split(&quot;-&quot;, 3)[-1]\n            .replace(&quot;-&quot;, &quot; &quot;),\n            &quot;-&quot;.join(input_string.split(&quot;/&quot;)[-1].split(&quot;.md&quot;)[0].split(&quot;-&quot;)[:3][::-1]),\n            input_string,\n        )\n    )\n\nlogger.debug(&quot;Post keys generated&quot;)\n\n\ndef get_postcontent(path):\n    with open(path, &quot;r&quot;) as file:\n        return markdown.markdown(frontmatter.load(file).content)\n\n\npost_data = [\n    {\n        &quot;title&quot;: pk[0],\n        &quot;date&quot;: pk[1],\n        &quot;slug&quot;: pk[0].replace(&quot; &quot;, &quot;-&quot;),\n        &quot;content&quot;: get_postcontent(pk[2]),\n    }\n    for pk in post_keys\n]\n\npost_data = sorted(post_data, key=lambda x: x[&quot;date&quot;], reverse=True)\n\n\nlogger.debug(&quot;Post data generated&quot;)\n\nwith open(&quot;./src/blog.html&quot;, &quot;r&quot;) as file:\n    page_blog = file.read()\n    logger.debug(&quot;blog.html content loaded&quot;)\n\ntemplate_blog = env.from_string(page_blog)\nrendered_blog = template_blog.render(posts=post_data)\n\nwith open(&quot;./docs/blog.html&quot;, &quot;w&quot;) as file:\n    file.write(rendered_blog)\n    logger.debug(&quot;blog.html successfully built and saved&quot;)\n\nlogger.info(&quot;No Build Errors!............&quot;)\n\n# Build each post\nwith open(&quot;./src/post.html&quot;, &quot;r&quot;) as file:\n    page_post = file.read()\n    template_post = env.from_string(page_post)\n\nfor post in post_data:\n    rendered_post = template_post.render(post=post)\n    post_slug = post[&quot;slug&quot;]\n    with open(f&quot;./docs/{post_slug}.html&quot;, &quot;w&quot;) as file:\n        file.write(rendered_post)\n        logger.debug(f&quot;{post_slug}.html successfully built and saved&quot;)\n\n# Copy static folders/files to docs\nshutil.copytree(&quot;./src/static&quot;, &quot;./docs/static&quot;, dirs_exist_ok=True)\nlogger.debug(&quot;static files copied to docs&quot;)\n\nSimulating the Github Pages server using a simple flask server\nAs I mentioned above, the Github Pages server will automatically render /route.html for /route.\nBut, our simple python -m http.server 8000 will not do that!\nA simple workaround is to use a simple Flask Server to simulate this Github Pages environment.\nfrom flask import Flask, render_template, send_from_directory\n \n# Initialize Flask app\napp = Flask(__name__, template_folder=&quot;.&quot;, static_folder=&quot;./static&quot;)\napp.root_path = app.root_path + &quot;/docs&quot;\n \n# Start the dev server\n@app.route(&quot;/&quot;)\n@app.route(&quot;/&lt;route&gt;&quot;)\ndef serve_html(route=&quot;index&quot;):\n    return render_template(f&quot;{route}.html&quot;)\n \n \nif __name__ == &quot;__main__&quot;:\n    logger.debug(&quot;Development server started&quot;)\n    app.run(debug=True)\nEnd\nAs I’ve made the site, I learnt that the biggest difficulty was designing the frontend not all this scripting work. Making a static site generator is not so difficult especially since you have so many examples that you can reverse engineer. More than half the effort was spent in making the site look ‘not hideous’ after I was done with the Python scripting.\nI don’t know why Frontend Development is said to be ‘easy’. I find it to be the most challenging part of web development.\nMaybe because frontend optimization is not so important (or rather so costly)…\nHope you enjoyed the post!"},"Posts/My-Portfolio-Page":{"title":"My Portfolio Page","links":["tags/","Posts/Github-Pages"],"tags":[""],"content":"For Data Science &amp; Machine Learning Roles\n\n\n👋 Hi, I’m Pradyumna!\n👀 I’m interested in … web dev, machine learning, linux (But currently, most importantly, something to do in the Summer :”) )\n🌱 I’m currently learning … DSA, Web Development, linux, python, machine learning\n💞️ I’m looking to collaborate on … have nothing at the moment but you can contact me!\n📫 How to reach me … you can contact me at pradyumnamalladi2003@gmail.com\n\nGithub\n\nLinkedin\nhttps://www.linkedin.com/in/malladi-pradyumna/\n\n\n\n                  \n                   # Relevant Courses Pursued\n                  \n                \n\nMathematics 1 (Multivariate Calculus)\nMathematics 2 (Linear Algebra)\nMachine Learning (Classification Algorithms)\nFoundations of Data Science (Regression Algorithms)\n\n\n\n\n\n                  \n                   # Relevant Projects (Formal under a Professor / Informal)\n                  \n                \n\nMonitoring of Water Quality Parameters via remote Satellite Imagery. Obtained good r2 scores for critical parameters such as Chlorophyll-a, Turbidity, Temperature, Salinity, etc under Prof. Anmala Jagadeesh.\nInvestigating In-Context Learning in Large Language Models under Prof. Venkatakrishnan Ramaswamy.\nImplementation of several classical Machine Learning Models like the Perceptron, Logistic Regression, Fischer’s Linear Discriminant, etc in Numpy.\nA Multi Layer Perceptron (MLP) library in c++ from scratch.\nImplementation of Variational Auto-Encoders in pytorch and applying on the MNIST Datasets.\nRegression Models in Numpy.\n\n\n\n\n\nFor Software Engineering Roles\n\n\n\n                  \n                   # Relevant Courses Pursued\n                  \n                \n\nData Structures and Algorithms\nObject Oriented Programming\nDatabase Management Systems\nOperating Systems\nTheory of Computation\nCompiler Construction\n\n\n\n\n\n                  \n                   # Relevant Projects (Informal)\n                  \n                \n\nTwitter Clone Backend in Rust (Actix-Web), Typescript (SolidJS), Redis and MySQL\nWorked on A Retrieval Augmented Generation application using BERT Embeddings and a Flask Server.\nTutorial for making a Static Site Generator\nRegex Library in pure C++ (Group Project with Dhruv, Rishabh, Keshav and Charitha)\nMulti Layer Perceptron (MLP) Library in pure C++.\n\n\n\n\n"},"Posts/New-Website":{"title":"New Website","links":[],"tags":[],"content":"There are a couple of reasons why the website is undergoing changes:\n\nAppeal: I rarely posted on the Older Website and was slowly realizing I’d never do it if it required specific time to be set aside for it. Slowly it didn’t even feel like my website for some reason.\nObsidian: Recently, I’ve started using Obsidian to organize my notes and thoughts. Using some wonderful open-source tools like Quartz and Obsidian-Publish, I can now publish my content directly to the web with a small build step. This solves 1. also as the website is populated organically as I keep making these notes without much dedicated effort.\nAesthetic Change: The old website’s styling felt too “professional” xD and made me slightly nauseous. This one is much more satisfying to me personally.\n\n\n\n                  \n                  TLDR \n                  \n                \nThese changes align better with my current workflow and I like this design better.\n"},"Posts/Welcome":{"title":"Welcome","links":[],"tags":["welcome","miscellaneous"],"content":"This is my personal website which I will try to maintain regularly. I will be posting some blog articles over the next few months here and share some parts of my work and life.\nAs for why have a personal website, I have thought about it and :\n\nIt is good for your mental health to write frequently and you get to organize your thoughts more often.\nIt gives me an excuse to actually stop wasting time on mindless internet scrolling and actually do something productive instead.\nIt is too easy (and free!) to make and host one nowadays that there is no excuse to not have one.\nEdit: I’m sorry it is not that easy to make and host one. React is spawn of Satan. Leaving this here for posterity.\nEven if it amounts to nothing at least I have gained some technical knowledge making the blog.\nEdit: Even this point is moot now I guess haha\n\nAs for the kind of content I would like to post here:\n\nMaintain a list of projects that I am doing/have done/currently am doing.\nSome blog posts with my thoughts on various things.\nSome technical posts on machine learning (Summarizing as I learn for better retention)\nAnything else I feel like posting.\n"},"Posts/images/Pasted":{"title":"Pasted","links":[],"tags":[],"content":""},"Transformers/A-Mathematical-Framework-for-Transformer-Circuits":{"title":"A Mathematical Framework for Transformer Circuits","links":["Transformers/MLP","Transformers/Transformer","Transformers/Kronecker-Products","Transformers/Eigenvalue"],"tags":[],"content":"What is Mechanistic Interpretability?\n\n\nAttempting to reverse engineer the detailed computation performed by Neural Networks (and now Transformers!)\nDescribe the working of these Networks in simpler Mathematical Functions.\n\n\nWhat is our Goal?\n\n\nDiscover Algorithmic Patterns, Motifs, Frameworks which can be applied to larger models\n\n\nSimplifying assumptions made\n\n\nNo MLP (Multi Layer Perceptron / Fully Connected Neural Network) Layers\nNo Biases in Weights (If at all required we can modify weights creating an additional dimension that is always one but it doesn’t affect any insights discovered in the paper)\nNo Layer Norm\n\nNon Standard (but equivalent) Representation of the Transformer\n\nWhat is the “Residual Stream”?\n\n\nZero Layer Attention models Bigram Statistics\n\n\n\n                  \n                  Due to the absence of the Attention Mechanism, only the last produced token can influence the production of the next one. \n                  \n                \n\n\nThis should mean that the model would try to learn the Bigram Statistics table of the Dataset and use it to produce tokens.\n\n\nThis also means there is no “In-Context Learning” as the context is only the last produced token.\n\n\n\n\n\nOne Layer Attention Transformer is an ensemble of Bigram Statistics and “Skip-Trigrams”\nKronecker Products\nDuring the forward propogation of Transformers, we frequently do two “types” of multiplications\n\nMultiplying each vector in a Matrix with another Matrix (Eg: to convert tokens to queries / keys)\nWeighted average of the Vectors in a Matrix (Eg: to get the final representation of a token by the weighted average of all the other tokens, assigning weights after attending to them)\n\nWe can represent this more intuitively using Kronecker Products!\nHow is the next token produced?\nLet’s see how the One Layer Transformer produces the next token by updating the representation of the Last Produced Token.\nTo do this, it considers the entire context available to the model.\n\n\n\nPath Expansion Trick\n\n\n\n\n\nThe QK &amp; OV Circuits\n\n\n\n\n\n\n\n                  \n                  Splitting the computation into two seperable operations \n                  \n                \n\n\n\n\nThe Attention Pattern depends on the Source and Destination Token, but once a Destination token has decided how much to “Attend” to a source token, the effect on the output is a function only of that source token.\nIf multiple destination tokens attend to the same source token in the same amount, the source token will have the same effect on the Logits for the predicted output token.\n\nEigenvalue Analysis\nCan we “detect” whether an attention head is “Copying”?\nAccording to the authors, though they don’t provide a formal proof for this, the presence of large, positive Eigenvalues in the OV Circuit is indicative of “Copying”.\n\n\n\nIf we plot a histogram of the Attention Heads with the percentage of “Copying” Attention Heads on the X-Axis:\n\n\n\nTwo Layer Attention Transformer are more expressive!\nHow do they vary from One Layer only models?\nThe residual stream is a communication channel. Every Attention head reads in subspaces of the Residual Streams determined by Wq, Wk and Wv and then writes to some subspac determined by Wo.\nWhen Attention Heads compose, there are three options:\n\nQ-Composition: Wq reads in a subspace affected by a previous head.\nK-Composition: Wk reads in a subspace affected by a previous head.\nV-Composition: Wv​ reads in a subspace affected by a previous head.\n\nHere, the Q &amp; K composition affect the attention pattern, allowing the second Attention Layer to express much more complex patterns while deciding which token to give attention to.\nV composition on the other hand affects what information an Attention Head “moves” when it attends to a given position.\nPath Expansion of the O-V circuit\nFreezing the Attention Layers as in the 1L case, we see that V-Composition affects the final output.\n\n\n\nPath Expansion of the Attention Scores of the QK Circuit\nWe have written the Attention Pattern in this form earlier in the 1L case.\n\n\n\nWe shall attempt to do the same again. But, Cqk takes a much more complex form indicating that the 2nd Layer can implement very complex attention patterns.\n\n\n\nInduction Heads\nLet us see an example of how the Attention Heads in a 2L Transformer work.\n\nThe Aqua colored Induction Heads often attend back to the previous instances of the token which will come next!\nWe call these kind of Attention Heads “Induction Heads”!\n\n\n                  \n                  Induction Heads \n                  \n                \nInduction heads search over the context for previous examples of the present token. If they don’t find it, they attend to the first token (in our case, a special token placed at the start), and do nothing. But if they do find it, they then look at the next token and copy it. This allows them to repeat previous sequences of tokens, both exactly and approximately.\n\n\n\n\nHow do Induction Heads Work?\n\n\nThe Simplest way an Induction Head could be made\n\nTerm Importance Analysis\n\n\nInteresting Visualizations of Induction Heads\n&lt;Show the Youtube Video?/&gt;\n\n\n\n"},"Transformers/Eigenvalue":{"title":"Eigenvalue","links":[],"tags":[],"content":""},"Transformers/Kronecker-Products":{"title":"Kronecker Products","links":[],"tags":[],"content":"\n\n                  \n                  Tensor / Kronecker Product \n\n                  \n                \n"},"Transformers/MLP":{"title":"MLP","links":[],"tags":[],"content":""},"Transformers/Transformer":{"title":"Transformer","links":[],"tags":[],"content":""},"index":{"title":"_index","links":["Posts/Welcome","Posts/About","Posts/New-Website","Posts/My-Portfolio-Page","Transformers/A-Mathematical-Framework-for-Transformer-Circuits","Posts/Github-Pages"],"tags":[],"content":"Please use these links below as a starting point for going through the website.\n\nWelcome\nAbout\nWhy the new Website?\nMy Portfolio Page and everything else.\nA Mathematical Framework for Transformer Circuits\nGithub Pages\n"}}